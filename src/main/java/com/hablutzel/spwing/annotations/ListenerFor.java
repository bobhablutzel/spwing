/*
 * Copyright Â© 2023, Hablutzel Consulting, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hablutzel.spwing.annotations;


import com.hablutzel.spwing.component.EventFamily;

import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import java.awt.*;
import java.awt.event.HierarchyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.lang.annotation.*;


/**
 * ListenerFor allows a document component method to be a listener
 * for an event, without having to follow the normal naming convention
 * of (onXXX) for XXX. Listeners can listen for two families of events:
 * <ul>
 *     <li>AWT component events, issued by the AWT &amp; Swing components</li>
 *     <li>Document events, issued by application code</li>
 * </ul>
 * AWT events are automatically generated by the AWT (or Swing) components
 * based on certain events - key presses, mouse movements, etc. These events
 * are characterized by the AWT component having a addXXXListener method
 * (for example, {@link Component#addMouseListener(MouseListener)},
 * {@link javax.swing.JComponent#addAncestorListener(AncestorListener)}, and so
 * forth. Each of these listeners are passed a subclass of {@link java.util.EventObject}
 * in the method. For translating these into event names, the name of the method
 * from the listener becomes the event name - e.g. {@link MouseListener#mouseClicked(MouseEvent)}
 * becomes the event <code>mouseClicked</code>, while {@link AncestorListener#ancestorAdded(AncestorEvent)}
 * becomes <code>ancestorAdded</code>. The only exception to this is for the methods
 * {@link java.awt.event.HierarchyBoundsListener#ancestorMoved(HierarchyEvent)} which becomes the
 * event name <code>hierarchyAncestorMoved</code>
 * to disambiguate it from {@link AncestorListener#ancestorMoved(AncestorEvent)}.
 *
 * @author Bob Hablutzel
 */
@Documented
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(ListenersFor.class)
public @interface ListenerFor {

    /**
     * The event to listen to. For {@link com.hablutzel.spwing.events.DocumentEvent} events,
     * this is the complete name of the event - e.g. <code>evtNameChanged</code>> rather than
     * <code>NameChanged</code>. For AWT events, this name will correspond to the method of the
     * listener that would be called. For example, for events from the {@link java.awt.event.MouseMotionListener},
     * the event names will be <code>mouseMoved</code> and <code>mouseDragged</code>
     * @return The name of the event to listen to.
     */
    String event();


    /**
     * The target which might emit the event. Only used with AWT component
     * events; this will be the {@link Component#getName() name} of the
     * component that emits the event. If omitted, <i>all</i> active AWT
     * components that can provide this event will be listened to.
     * @return The target name
     */
    String target() default "";


    /**
     * Define the {@link EventFamily} for the event name. Defaults to introspection but
     * can be explicitly stated to be Document or AWT. For introspection, the
     * default algorithm is to check to see if the event name begins with <code>evt</code>. Event names
     * that start with <code>evt</code> are considered document events; all others are AWT
     * events (even if no AWT event corresponds to that name). If desired, the application
     * can define a bean of type {@link com.hablutzel.spwing.events.EventNameDeterminant}; if
     * present the bean will be called to determine the proper classification of the name.
     * @return The {@link EventFamily}
     */
    EventFamily determination() default EventFamily.Introspection;
}
